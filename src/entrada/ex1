Redes de Sensores Sem Fio sao redes basicamente projetadas para
monitorar e detectar eventos de interesse. Dois aspectos chaves
desta tarefa sao a identificacao exata do tempo de ocorrencia
de um evento e, principalmente, a ordenacao e o sequenciamento
da ocorrencia de diversos eventos na rede. Solucoes atuais
propoem diferentes algoritmos de sincronizacao de relogios dos
nos sensores. Entretanto tais solucoes requerem constantes
execucoes para manter a rede sincronizada, ja que os relogios
dos sensores rapidamente se dessincronizam (ate 3 segundos por
dia). Este trabalho propoe o algoritmo LiTE, uma nova
abordagem, simples e eficiente, para localizacao temporal e
ordenacao de eventos em tais redes que nao requer sincronizacao
dos nos sensores. Experimentos praticos em laboratorio com nos
sensores reais comprovam a aplicabilidade do modelo e
simulacoes extensivas mostram a escalabilidade e robustez da
solucao proposta.


Introducao

Redes de Sensores Sem Fio (RSSFs) sao compostas por nos
sensores que cooperam entre si a fim de monitorar uma area de
interesse comum. Esta tecnologia pode ser empregada nas mais
diversas situacoes: monitoracao de ambientes inospitos,
instalacoes medicas, urbanas, militares, industriais, etc. a
medida em que ocorrem avancos tecnologicos nas areas de
sensores, nanotecnologia, circuitos integrados e comunicacao
sem fio, a utilizacao das RSSFs nas mais diversas aplicacoes se
torna uma possibilidade revolucionaria, por se tratar de uma
ferramenta de coleta e processamento de informacao, que tende a
ser escalavel e de baixo custo.

Tais RSSFs sao redes voltadas basicamente a deteccao e
monitoracao de eventos. Eventos possuem duas caracteristicas
principais: a primeira e qualitativa (criterio causal), diz
respeito a variavel monitorada (e.g., temperatura,
luminosidade, som, pressao); a segunda caracteristica e
referente a localizacao, tanto espacial quanto temporal
(criterio espaco-temporal), e indica quando e onde um evento
ocorreu. Enquanto que o primeiro criterio e facilmente
identificado usando o dispositivo sensorial que o detectou, o
criterio espaco-temporal so pode ser identificado usando-se o
posicionamento dos nos sensores e tambem, em geral, os seus
relogios. Considerando que os nos sensores de uma RSSF sao
basicamente estaticos, o criterio espacial, uma vez
identificado, permanece o mesmo ao longo do tempo.

Entretanto, manter os relogios dos nos sensores sincronizados e
um desafio muito grande uma vez que estes se dessincronizam a
uma taxa de 40 \mu s/s . A essa taxa de dessincronizacao, os
nos sensores precisarao ser sincronizados a cada 25s para
manter uma sincronizacao na faixa dos milissegundos. Tendo em
vista esta problematica, diversos trabalhos propoem algoritmos
de sincronizacao leves e passiveis de serem executados
continuamente, dentre os quais podemos citar: Reference
Broadcast Synchronization, Flooding Time Synchronization
Protocol, Delay Measurement Time Synchronization e Post-Facto
Synchronization.

Neste trabalho, uma nova abordagem, simples e eficiente, para
localizacao temporal e ordenacao de eventos em RSSFs esta sendo
proposta. Nesta abordagem, implementada no algoritmo LiTE
(Localizacao Temporal de Eventos), nao se procura sincronizar
os nos sensores entre si, mas sim sincronizar o evento com o
relogio do no sink, responsavel por coletar e agregar todos os
eventos da rede. Tal algoritmo se baseia no calculo preciso dos
atrasos dos pacotes enviados em multiplos saltos a partir do no
que detectou o evento ate o no sink. Experimentos reais
conduzidos em laboratorio atraves de osciloscopios e nos
sensores atestam a possibilidade do calculo destes atrasos
enquanto que simulacoes extensivas usando o simulador NS-2
demonstram a escalabilidade, a eficiencia e a robustez da
solucao proposta.

O restante deste trabalho esta organizado como segue. Solucoes
atuais encontradas na literatura sao discutidas na secao 2. Na
secao 3, sao introduzidos alguns conceitos relevantes a
compreensao deste trabalho. Em seguida, na secao 4, e
apresentado o algoritmo proposto, o LiTE. Na secao 5, sao
feitas avaliacoes de aplicabilidade e de desempenho. Na secao
6, alguns aspectos sobre a aplicabilidade e possivel
substituicao dos algoritmos atuais pelo proposto neste trabalho
sao discutidos. Por ultimo, na secao 6, sao apresentadas
conclusoes relativas aos resultados obtidos e possiveis
aspectos que deverao ser tratados em trabalhos futuros.


Trabalhos Relacionados

O Reference Broadcast Protocol (RBS) e um protocolo de
sincronizacao que utiliza um broadcast de referencia, o qual e
originado a partir de nos especiais (beacons) que possuem o
tempo de "referencia". Os nos beacons realizam o broadcast de
referencia e, em seguida, seus nos vizinhos fazem um broadcast
informando o tempo de recebimento deste pacote, possibilitando
a criacao de uma tabela com os atrasos (offsets) relativos a
cada vizinho. Este algoritmo apresenta a vantagem de eliminar
muitas fontes de erro no processo de sincronizacao. Entretanto,
seu custo computacional e elevado se comparado com as demais
solucoes -- O(2n) , onde n e a quantidade de nos na rede.

No protocolo Flooding Time Synchronization Protocol (FTSP), o
no sink (que possui o tempo de referencia) faz um broadcast
dando inicio ao flooding na rede. Os demais nos, ao receberem
esse pacote, fazem um timestamp na camada MAC (Media Access
Control), calculam os atrasos do tempo de transmissao em
relacao ao sink, e repassam o pacote com as devidas correcoes,
dando continuidade ao flooding. Ao final, todos os nos
alcancaveis da rede terao realizado um broadcast e toda a rede
estara sincronizada com uma determinada precisao, independente
do numero de saltos em relacao ao sink. O custo de comunicacao
do FTSP e de um pacote enviado por cada no da rede -- O(n) .

O Delay Measurement Time Synchronization (DMTS) pode ser
utilizado para sincronizacao local (assim como o RBS), ou
global (como o FTSP). A sincronizacao local ocorre como segue.
Em uma determinada regiao e eleito um no lider (referencia), o
qual faz um broadcast com o seu tempo. Ao contrario do RBS, os
vizinhos nao trocam pacotes entre si. Eles se sincronizam com o
tempo do lider, calculando o atraso de transmissao do pacote
(detalhado na secao abaixo). A sincronizacao por multiplos
saltos funciona da mesma forma, porem apos cada vizinho se
sincronizar, ele deve realizar um broadcast contendo o seu
tempo sincronizado, ou seja, funciona como um algoritmo de
inundacao (flooding) com custo O(n) . Existe uma forte
semelhanca entre o DMTS e o FTSP, mas o que os difere e
basicamente a forma de calcular o atraso.

O algoritmo Post-Facto Synchronization e um algoritmo de
sincronizacao instantanea voltada especificamente para eventos.
Assim como o RBS e necessario que hajam nos de referencia
espalhados ao longo da rede. No entanto, esses nos beacons so
realizam o broadcast de referencia caso algum vizinho detecte
um evento e solicite o tempo real. Desta forma ha uma ordenacao
precisa dos eventos, porem se varios eventos sao detectados
praticamente todo o tempo, varias solicitacoes de sincronizacao
serao realizadas.

Como pode-se observar, existem diferentes propostas buscando
solucoes cada vez mais eficientes na area de sincronizacao.
Embora existam diversas vantagens na utilizacao de algoritmos
de sincronizacao, e importante destacar que isto implica em
consumo extra de energia da rede, que e escassa em RSSFs.
Considerando que em nos sensores Mica2 ha uma taxa de
dessincronizacao de 40 \mu s/s , isso acarretara em uma
dessincronizacao de aproximadamente 3,5s por dia e a rede
precisara ser ressincronizada frequentemente, o que resulta em
mais consumo de energia. Neste trabalho, uma nova abordagem
esta sendo proposta: nao se preocupar com a sincronizacao dos
nos sensores, mas sim dos eventos. Nesta abordagem, nenhum
pacote sera trocado para sincronizar nos com relacao a alguma
referencia. Alem disso, a sincronizacao do evento e realizada
com o proprio pacote que o no sensor envia ao sink informando a
respeito da ocorrencia do evento, o que gera uma solucao com
custo de comunicacao praticamente nulo.

Definicao do Problema

Rede de Sensores Sem Fio. Uma RSSF pode ser representada
formalmente como um grafo Euclidiano G=(V,E) como segue:

- V = \{v_{0},v_{1},\ldots, v_{n-1}\} e o conjunto de nos
sensores (vertices do grafo), sendo que v_{0} e o no sink;

- \forall v_i \in V , r e o raio de comunicacao de v_i ;

- Q = [0,x] \times [0,y] \times [0,z] a regiao de sensoriamento
em tres dimensoes;

- \edge{i,j} \in {E} se, e somente se, a distancia entre v_i e
 v_j  for menor que  r , i.e.,  v_i  alcanca  v_j  e
vice-versa;

- t e o tempo global da rede; pode ser baseado no UTC
(Coordinated Universal Time, e.g., GPS) ou em um tempo relativo
(e.g., do no sink).

- \forall v_i \in V , t_i(t) e o tempo local em que v_i se
encontra no instante t .

Conforme mencionado, redes de sensores sao basicamente voltadas
a monitoracao, deteccao e notificacao de eventos.

Eventos e Historico Local e Global de Eventos. Um evento pode
ser definido como "algo que acontece em um dado lugar e tempo"
ou "um fenomeno localizado em um unico ponto do espaco-tempo".
Do ponto de vista temporal em RSSFs, um evento pode ser
detectado por um ou mais nos e pode ser definido como:

- e^t_i e o evento e sendo detectado pelo no v_i no seu tempo
local t_i ;

- h_i = \{e^{t_1}_i, e^{t_2}_i, \ldots\} e o historico ordenado
de eventos do no v_i ;

- \{h_1 \cup h_2 \ldots \cup h_n\} \leadsto H e o historico
global de eventos ordenado pelo tempo global t ;

Em RSSFs, o historico local pode ser facilmente calculado
ordenando-se os eventos detectados usando os relogios locais
dos nos sensores. Entretanto, para que esta informacao seja
util, ela precisa ser convertida em um historico global que e o
historico de todos os eventos da rede que, neste trabalho, e a
definicao de ordenacao de eventos (figura abaixo):

Ordenacao de Eventos. Conversao de \{h_1 \cup h_2 \ldots \cup
h_n\} em H .

Uma solucao para este problema de ordenacao de eventos e manter
todos os nos da RSSF sincronizados com o tempo global t :

Sincronizacao de Nos e Erro de Sincronizacao. \forall v_i \in V
atualizar t_i(t) \approx t . Diga-se aproximado, pois nenhum
algoritmo de sincronizacao e perfeito por se basearem em
tecnicas que geram erros. O erro de sincronizacao de um no i e
definido como t_i(t) - t .

Quando os nos sensores estao com seus relogios sincronizados,
 H  e facilmente gerado ordenando-se os eventos por seus tempos
locais t_i (que sao aproximacoes do tempo global t ). Em RSSFs,
por seus protocolos serem baseados em multiplos saltos, uma das
tecnicas comumente utilizadas em sincronizacao e a estimativa
de atraso de um pacote em um salto (figura abaixo).

Estimativa de Atraso de um Salto ( a^p_{ij} ). Estimativa de
atraso (delay measurement consiste em calcular, ou estimar,
todos os possiveis atrasos existentes durante a transferencia
de um pacote p , em um unico salto, do no transmissor i para o
no receptor j : a^p_{ij} = a^p_{env} + a^p_{mac} + a^p_{trans}
+ a^p_{prop} + a^p_{cheg} + a^p_{recep} , onde:

- a^p_{env} e o atraso de envio; onde ocorre a montagem da
mensagem, e cabecalho. Este atraso e variavel e
nao-deterministico pois o processo de envio concorre com outros
processos e e dependente do sistema operacional;

- a^p_{mac} e o atraso da camada MAC; esta diretamente
relacionado ao estado do canal, ou seja, neste momento o no
esta disputando com os demais sensores um momento para enviar
seu pacote;

- a^p_{trans} e o atraso de transmissao; e deterministico, pois
esta relacionado ao tempo decorrido durante a transmissao bit a
bit do pacote, dependendo principalmente do tamanho do pacote;

- a^p_{prop} e o atraso de propagacao; dado que a velocidade de
propagacao de uma onda eletromagnetica e de aproximadamente 3
\times 10^8 m/s , basta relacionar essa velocidade com o espaco
percorrido;

- a^p_{cheg} e o atraso de chegada; tempo de recebimento do
pacote completo; deterministico e depende do tamanho do pacote;

- a^p_{recep} e o atraso de recepcao; tempo decorrido durante a
montagem do pacote e interrupcao do sistema operacional; este
tempo varia depende do SO, portanto e um tempo nao
deterministico.

Localizacao Temporal de Eventos

Nesta secao, e apresentado um novo algoritmo para sincronizacao
e ordenacao de eventos em RSSFs: o Localizacao Temporal de
Eventos).

Atraso de Roteamento do Pacote ( A^p_{ij} ). Tempo total que o
pacote p levou para deixar o no v_i e chegar, em multiplos
saltos, ao no {v_j} (em geral, o no sink). Esse calculo e
possivel somando-se todos os atrasos e todos os tempos de
processamento dos nos intermediarios (i.e., que repassaram o
pacote) ate o momento que este atingiu o no de destino,
conforme ilustrado na figura abaixo. Logo, A^p_{ij} = a^p_{ik}
+ \ldots + a^p_{lj} , onde \{v_k, \ldots, v_l\} sao nos
intermediarios que repassaram o pacote.

O atraso de roteamento pode ser calculado usando qualquer
protocolo de roteamento, uma vez que qualquer atraso
introduzido pelo roteamento sera calculado nesta fase do
algoritmo LiTE. e importante ressaltar que tanto o processo de
calculo de atraso dos saltos quanto o de roteamento nao
requerem sincronizacao de relogios entre os nos sensores.

O algoritmo descreve o funcionamento do algoritmo LiTE proposto
neste trabalho. O algoritmo e simples e eficiente, e nao requer
nenhuma configuracao inicial (i.e., troca de mensagens para sua
configuracao). Neste algoritmo, quando um determinado no sensor
detecta um evento, este ira registrar o tempo local de deteccao
do evento e, em seguida, ira solicitar ao protocolo de
roteamento o proximo salto do pacote. Como este ultimo passo
pode demorar dependendo do protocolo de roteamento (reativo,
pro-ativo, hibrido), o atraso de roteamento e atualizado com
este tempo de processamento local. Em seguida, o no encaminhara
o pacote com o registro do evento para o proximo no sensor em
direcao ao sink.

Cada no sensor intermediario ira calcular o atraso do salto ao
receber o pacote, registrar o tempo de recebimento do pacote e
calcular o proximo salto do pacote. Em seguida, o no
intermediario ira acrescentar ao atraso de roteamento do pacote
o seu atraso de salto mais o seu tempo de processamento e, por
ultimo, encaminhar o pacote para o proximo salto. Quando o
pacote chegar ao no sink, este ira tambem calcular o atraso do
salto e acrescenta-lo ao atraso de roteamento. Por ultimo, o no
sink ira calcular o tempo real de ocorrencia do evento como
sendo o tempo atual subtraido do atraso do pacote e, entao,
registrar o evento em sua ordem correta no historico global de
eventos.

A implementacao do calculo de atraso de um salto pode ser
realizada apenas na camada de aplicacao ou pode tirar proveito
de informacoes de tempo introduzidas na camada MAC. Para isso,
duas variacoes do LiTE foram implementadas: o LiTE-Apl,
implementado apenas na camada de aplicacao (conforme o
algoritmo apresentado), e o LiTE-Mac, implementado
introduzindo-se marcacoes de tempo na camada MAC.

No LiTE-Mac, um codigo e introduzido logo apos o no sensor
obter acesso livre ao meio e logo antes do pacote ir para o
driver de rede para ser enviado (antes da camada fisica). Esse
codigo obtem o atraso da camada de aplicacao ate o momento de
acesso livre ao meio e adiciona esse atraso ao atraso de
roteamento. Outro codigo no no receptor e responsavel por
armazenar uma marcacao de tempo no instante em que o driver de
rede comeca a receber o pacote. Essa marcacao de tempo, junto
com o tempo de recebimento na aplicacao, sera adicionado ao
atraso de roteamento. Nesta versao do LiTE, grande parte dos
tempos nao deterministicos de envio e recepcao de pacotes podem
ser eliminados, gerando um calculo de atraso mais preciso.

Avaliacao de Desempenho

Nesta secao, o desempenho do algoritmo LiTE sera avaliado sob
tres aspectos: aplicabilidade, escalabilidade e robustez. O
primeiro aspecto, experimentado em nos sensores reais, avalia a
tecnica de calculo de atraso de um salto e e apresentado na
secao a seguir.

Experimentos em Nos Sensores.

O objetivo destes experimentos e analisar o impacto dos erros
nao deterministicos na tecnica de calculo de atrasos quando
implementada em nos sensores reais, mais especificamente, nos
nos sensores SunSPOT. Apesar de experimentos similares terem
sido aplicados em outros trabalhos, este e o primeiro a
experimentar tal tecnica em sensores SunSPOT e o primeiro a
comparar dados obtidos tanto na camada MAC quanto de Aplicacao.
Alem disso, como sera mostrado a seguir, resultados diferentes
foram obtidos por tal tecnica quando implementada nestes nos
sensores.

Metodologia

Para calcular o tempo de envio e recepcao de um pacote e, mais
importante, calcular a variacao deste tempo (tempos nao
deterministicos), um relogio externo, com tempo global, foi
necessario. Para isso, dois nos sensores, um transmissor e um
receptor, foram conectados a um osciloscopio de alta precisao
(MS06032A, Agilent Technologies, com precisao de 25 \mu s ).
Pacotes iguais com tamanho de 52 bytes sao entao enviados pelo
transmissor. Na camada de aplicacao antes de solicitar o envio
do pacote, o sinal da saida digital D0 sobe para nivel logico 1
(marcacao Apl_1 da figura), permanecendo assim ate que todas as
verificacoes da disponibilidade do meio sejam feitas e,
finalmente, o pacote esteja pronto para ser enviado, tornando
ao nivel logico inicial 0 (marcacao Mac_1). Apos a chegada do
pacote no receptor (atraso de chegada), o nivel logico da saida
digital D0 deste no sobe para 1 (marcacao Mac_2) permanecendo
assim ate que, na aplicacao, apos a finalizacao do processo de
recebimento do pacote, o nivel volte ao seu valor inicial 0
(marcacao Apl_2). Para cada pacote enviado e recebido, pode-se
calcular o tempo de um salto tanto na camada de aplicacao
(atrasoApl = Apl_2 - Apl_1) quanto de acesso ao meio (atrasoMac
= Mac_2 - Mac_1).

e importante notar que, neste experimento, nao se procura
calcular todos os atrasos do pacote, mas sim identificar
atrasos nao-deterministicos, ou seja, os que variam
inesperadamente de um pacote para outro, uma vez que tais
atrasos nao deterministicos sao os responsaveis pela imprecisao
da tecnica.


Analise dos Resultados

Os graficos da figura abaixo ilustram os atrasos obtidos por
diversos pacotes em um salto. Como pode-se observar na figura,
mesmo sem concorrencia de acesso ao meio, ainda assim alguns
pacotes obtiveram atrasos bem maiores do que a media, indicando
uma variacao grande dos atrasos quando esta tecnica e
implementada na camada de aplicacao. As figuras ilustram os
atrasos obtidos na camada MAC, sendo que esta ultima com uma
visao mais detalhada. Como pode ser observado, tais atrasos
variam cerca de 1 ms}, principalmente abaixo da media.

Nas figuras abaixo, sao mostrados os histogramas de densidade
dos atrasos na camada de aplicacao e MAC, respectivamente.
Observando os graficos, pode-se notar que, nestes sensores
SunSPOT, os atrasos nao seguem uma distribuicao Gaussiana,
conforme considerado por grande parte dos trabalhos que simulam
algoritmos de sincronizacao. Isso e uma observacao muito
importante, pois a utilizacao de modelos errados pode gerar
conclusoes incorretas a respeito da eficiencia dos algoritmos
propostos. Para confirmar tal observacao, os graficos
quantil-quantil da figura abaixo comparam os quantis amostrais
com os teoricos, indicando mais uma vez a nao-normalidade dos
dados pois varios pontos nao estao proximos a reta de minimos
quadrados plotada.

Os graficos Q-Q, apesar de serem bastante poderosos para
verificar desvios de normalidade, nao constituem um teste
formal, servindo apenas como uma analise exploratoria dos
dados. Testes de adequacao formais, tais como o Chi-quadrado e
Kolmogorov-Smirnov, permitem uma analise mais profunda da
questao. Desta forma, tais testes foram aplicados para um nivel
de confianca de 95% nos dados obtidos na camada de aplicacao e
na camada MAC e obtiveram valor de prova p - value < 0.01 para
ambos os testes. Esse p - value e a medida do grau de
concordancia entre os dados e a hipotese nula (no caso, que a
distribuicao de probabilidade dos dados e normal). Quanto menor
o p - value, menor e essa probabilidade. Uma regra pratica de
decisao e rejeitar a hipotese nula se p - value <= alpha, onde
alpha e a taxa de erro. Como esta-se procurando uma margem de
confianca de 95%, entao, alpha = 1 - 0.95 = 0.05. Logo, com
base nos testes aplicados com os dados coletados nas medicoes,
pode-se rejeitar a hipotese de normalidade.

Do ponto de vista de aplicabilidade, pode-se observar pelos
graficos mostrados que os atrasos nao deterministicos geram um
erro de aproximadamente 1 ms ao ser utilizar a camada MAC e um
erro de aproximadamente 5 ms na camada de aplicacao. Uma vez
que observa-se pouca variacao nos atrasos, pode-se concluir que
a tecnica e passivel de ser implementada em nos sensores reais
e, mais especificamente, nos nos sensores SunSPOT.

Experimentos de Escalabilidade e Robustez

O objetivo destes experimentos e avaliar o comportamento do
algoritmo quando executado em multiplos saltos em uma RSSF.

Metodologia

A avaliacao de desempenho foi realizada utilizando o Network
Simulator 2. Em todos os resultados, as curvas representam uma
media das execucoes, enquanto que as barras de erro, o
intervalo de confianca para 95% de confianca a partir de 33
execucoes diferentes (sementes aleatorias).

A tabela abaixo apresenta valores padroes para os parametros de
simulacao. Os nos sensores sao distribuidos no campo de
monitoramento de acordo com uma grade perturbada, i.e., os nos
tendem a ocupar a area uniformemente, mas sem formar uma grade
regular. Para simular os erros de calculo de atraso de um
salto, foram utilizadas simulacoes baseadas em medicoes. Nestas
simulacoes, medicoes reais obtidas experimentalmente (neste
caso, os atrasos calculados na secao anterior) sao alimentadas
ao simulador que ira utiliza-los quando necessario. Nesta
abordagem nao se tem os erros estatisticos observados ao se
utilizar um modelo probabilistico.

Analise dos Resultados

Em termos de escalabilidade, o principal fator que afeta o
algoritmo LiTE e a quantidade de saltos que o pacote percorre
saindo do no sensor que detecta o evento ate o no sink. Os
graficos da figura abaixo mostram este impacto que a quantidade
de saltos que o pacote percorre tem sobre o erro de calculo de
atraso e, consequentemente, na sincronizacao do evento. Como
pode-se observar, os erros obtidos quando o algoritmo LiTE e
implementado na camada de aplicacao sao maiores e crescem mais
rapidamente com o aumento do numero de saltos do que quando
implementado na camada de acesso ao meio. Uma outra observacao
importante e o erro de apenas 1.5 ms apos 50 saltos quando o
LiTE e implementado na camada MAC. Isso se deve ao fato do erro
de calculo de atraso de um salto poder ser anulado pelo erro de
calculo de atraso do salto seguinte. Ainda nesses graficos,
estamos comparando os resultados obtidos experimentalmente com
a simulacao dos erros usando uma distribuicao normal. Pode-se
observar uma certa diferenca entre os resultados, em especial
quando nos dados obtidos pela camada de aplicacao. Nos graficos
seguintes, apenas as simulacoes baseadas em medicoes serao
apresentadas.

Nos graficos da figura abaixo, esta-se avaliando a robustez do
algoritmo para sincronizar eventos quando diversos eventos sao
detectados na rede. Para isso, diversos nos na rede, escolhidos
aleatoriamente, detectaram um evento exatamente no mesmo
instante. O grafico da figura mostra o comportamento do erro de
sincronizacao dos eventos quando estes chegam no no sink,
enquanto que o grafico da figura seguinte mostra a diferenca
entre o menor e o maior tempo estimado do evento. Pode-se
observar que em ambos os casos, o erro de sincronizacao dos
eventos comeca a crescer quando muitos eventos sao detectados
ao mesmo tempo, devido a atrasos maiores no envio e
encaminhamento dos pacotes.

Foi avaliado tambem a capacidade do algoritmo LiTE de ordenar
eventos na rede. Para isso, nos graficos das figuras abaixo, 10
eventos foram gerados em ordem e em intervalos de tempo iguais
(eixo X). Tais eventos foram entao sincronizados no sink e
ordenados usando o LiTE-Apl, LiTE-Mac e tambem usando a ordem
de chegada dos pacotes no sink como a ordem dos eventos. Dois
cenarios foram avaliados. No primeiro cenario, os eventos estao
proximos um do outro (e.g., um som alto sendo detectado por
diversos sensores) e, no segundo cenario os eventos estao
espalhados aleatoriamente na rede (e.g., animais se movimentado
em diversas partes). Como pode ser observado nos dois graficos,
o algoritmo LiTE-Mac e capaz de acertar 100% da ordem dos
eventos quando o tempo entre estes e maior do que 5 ms, mesmo
no caso em que os eventos se encontram espalhados pela rede.
Pode-se observar ainda, pelos graficos, que a ordem de chegada
dos pacotes no sink nao e uma boa fonte de referencia,
principalmente no segundo cenario.

Por ultimo, foi avaliada a capacidade do algoritmo LiTE de
ordenar eventos a medida que a quantidade destes aumenta e
mantendo-se o tempo entre eventos fixado em 5 ms (figuras
abaixo). Novamente, foi-se avaliado o cenario em que eventos
estao proximos e espalhados. Pode-se observar que o algoritmo
LiTE-Mac foi capaz de ordenar corretamente mais de 90% de 20
eventos que estavam separados por apenas 5 ms de tempo. Alem
disso, observa-se um comportamento com queda bem mais lenta da
precisao deste ultimo algoritmo em relacao ao algoritmo
LiTE-Apl e na ordem de chegada dos pacotes no no sink.

Aplicabilidade e Extensibilidade da Solucao Proposta

Os resultados obtidos, em especial pelo algoritmo LiTE-Mac,
indicam que o mesmo e capaz de sincronizar e ordenar diversos
eventos separados entre si por apenas 5 ms. Nesta precisao, uma
aplicacao poderia, por exemplo, identificar facilmente a
localizacao de um som que estivesse a uma distancia de pouco
mais que 1.7 m dos sensores.

A solucao proposta no algoritmo LiTE pode ser facilmente
utilizada nas mais diversas aplicacoes dos algoritmos de
sincronizacao tradicionais sem a necessidade de modificacao:
localizacao temporal de eventos; ordenacao temporal de eventos;
rastreamento de objetos; localizacao de sons; geracao de mapas
de energia; etc.

Em outros casos, o algoritmo LiTE pode ser facilmente estendido
para ser utilizado em algoritmos que precisam de processamento
temporal distribuido como: fusao de dados: para combinar dados
relacionados no tempo, cada no intermediario pode sincronizar
os eventos que este for combinar/encaminhar usando a mesma
tecnica executada pelo no sink no algoritmo LiTE; localizacao
de sons e rastreamento in site: nos vizinhos podem trocar
pacotes com seus tempos locais e usarem o atraso do pacote para
sincronizar seus relogios. Apos o processamento distribuido, o
dado processado podera ser sincronizado globalmente no sink.

Alem disso, o algoritmo LiTE nao precisa se preocupar com
questoes como re-sincronizacao de nos devido ao drift, nos em
modo sleep, tempo de convergencia, complexidade computacional,
tolerancia a falhas, dentre outros; problemas estes que afetam
todos os algoritmos de sincronizacao (apesar de poucos
trabalhos levarem em consideracao todos ao mesmo tempo).

Conclusao

Este trabalho propos uma nova abordagem para o problema de
sincronizacao e ordenacao de eventos em RSSFs: o algoritmo LiTE
-- Localizacao Temporal de Eventos em RSSFs. For mostrado que,
em muitos cenarios, sincronizar todos os relogios da rede nao
apenas e um processo custoso como tambem desnecessario. Para
solucionar tal problema, o algoritmo LiTE propoe a
sincronizacao apenas dos eventos, e nao dos nos sensores.

O desempenho do algoritmo LiTE foi avaliado tanto em
experimentos praticos, em laboratorio com nos sensores reais,
que comprovaram a aplicabilidade do modelo, como tambem foi
avaliado em simulacoes, mostrando a escalabilidade e robustez
da solucao proposta. O algoritmo LiTE-Mac obteve o melhor
desempenho nos experimentos realizados, tanto praticos quando
simulados, e foi capaz de sincronizar eventos a 16 saltos de
distancia com erros proximos a apenas 1 ms e foi capaz ainda de
ordenar corretamente varios eventos espalhados pela rede e
distantes apenas 5 ms no tempo uns do outros.

Os resultados obtidos sao promissores. Algumas vantagens e
limitacoes serao exploradas em trabalhos futuros como, por
exemplo, identificar claramente quais os procedimentos que
geram erros nao-deterministicos nos sensores e, entao,
modifica-los para reduzir tais atrasos e adapta-los a uma rede
que requer sincronizacao de eventos, uma vez que a
implementacao dos sensores atuais nao levam isso em
consideracao.
